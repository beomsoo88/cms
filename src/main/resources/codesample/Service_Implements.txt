package %(PackageName)%.%(PackageAdd)%;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import %(PackageName)%.service.%(TableName)%DTO;
import %(PackageName)%.service.%(TableName)%Service;

@Service
public class %(TableName)%ServiceImpl implements %(TableName)%Service {

	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired %(TableName)%Mapper %(tableName)%Mapper;
	
	// SELECT (단건 사용시에도 공통 사용가능)
	public List<%(TableName)%DTO> get%(TableName)%List(%(TableName)%DTO eDTO) throws Exception {
		return %(tableName)%Mapper.select%(TableName)%List(eDTO);
	};

	// SELECT 조건에 따른 Count
	public int get%(TableName)%Count(%(TableName)%DTO eDTO) throws Exception {
		return (Integer)%(tableName)%Mapper.select%(TableName)%Count(eDTO);
	};

	// INSERT
	public int add%(TableName)%(%(TableName)%DTO eDTO) throws Exception {
		return %(tableName)%Mapper.insert%(TableName)%(eDTO);
	};

	// UPDATE PK값에 따른 업데이트
	public int chg%(TableName)%(%(TableName)%DTO eDTO) throws Exception {
		return %(tableName)%Mapper.update%(TableName)%(eDTO);
	};

	// DELETE 삭제 로직(Del_yn = 'Y' 업데이트 로직으로 사용)
	// 해당로직은 물리적으로 데이터 삭제시에만 사용
	public int del%(TableName)%(String keyId) throws Exception {
		return %(tableName)%Mapper.delete%(TableName)%(keyId);
	};

}
